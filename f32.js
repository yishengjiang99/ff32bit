!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var n=t();for(var r in n)("object"==typeof exports?exports:e)[r]=n[r]}}("undefined"!=typeof self?self:this,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(r,s,function(t){return e[t]}.bind(null,s));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t),n.d(t,"initProcessor",(function(){return u})),n.d(t,"postStream",(function(){return l})),n.d(t,"setup",(function(){return c}));const r=URL.createObjectURL(new Blob(['const frame = 36;\nconst chunk = 1024;\n\nclass PlaybackProcessor extends AudioWorkletProcessor {\n  constructor() {\n    super();\n    this.buffers = [];\n    this.started = false;\n    this.port.postMessage("initialized");\n    this.port.onmessage = this.handleMesg.bind(this);\n    this.rptr = 0;\n    this.loss = 0;\n    this.total = 0;\n    this.rms = 0;\n  }\n  handleMesg(evt) {\n    this.readable = evt.data.readable;\n    let reader = this.readable.getReader();\n    let that = this;\n    reader.read().then(function process({ done, value }) {\n      if (done) {\n        that.port.postMessage({ done: 1 });\n        return;\n      }\n      let offset = 0;\n      value &&\n        that.port.postMessage({stats:\n          {\n            rms: that.rms,\n            buffered: (that.buffers.length / 350).toFixed(3),\n            lossPercent: ((that.loss / that.total) * 100).toFixed(2)\n          }\n        });\n      while (value.length >= chunk) {\n        const b = value.slice(0, chunk);\n        that.buffers.push(b);\n        value = value.slice(chunk);\n      }\n      if (that.started === false && that.buffers.length > 10) {\n        that.port.postMessage({ ready: 1 });\n        that.started = true;\n      }\n      reader.read().then(process);\n    });\n  }\n\n  process(inputs, outputs, parameters) {\n    if (this.started === false) return true;\n\n    if (this.buffers.length === 0) {\n      this.loss++;\n      return true;\n    }\n    this.total++;\n\n    const ob = this.buffers.shift();\n    const fl = new Float32Array(ob.buffer);\n    let sum = 0;\n    for (let i = 0; i < 128; i++) {\n      for (let ch = 0; ch < 2; ch++) {\n        outputs[0][ch][i] = fl[i * 2 + ch];\n        sum += fl[i * 2 + ch] * fl[i * 2 + ch];\n      }\n    }\n    this.rms = Math.sqrt(sum / 256);\n    return true;\n  }\n}\nregisterProcessor("playback-processor", PlaybackProcessor);\n'],{type:"application/javascript"}));let s,o,a;const i={sampleRate:48e3,nchannels:2,bitdepth:32},u=async(e=i)=>(a=new AudioContext({sampleRate:e.sampleRate||44100,latencyHint:"playback"}),await a.audioWorklet.addModule(r),s=new AudioWorkletNode(a,"playback-processor",{outputChannelCount:[2]}),s.connect(a.destination),s),l=async e=>{if(s||(s=await u()),!s)throw new Error("unable to start proc");s.port.postMessage({readable:e}),"suspended"===a.state&&await a.resume()},c=async(e={nchannels:2,sampleRate:44100,bitdepth:32})=>(s=await u(e),o=new Worker("./build/playback-worker.js",{type:"module"}),o.postMessage({port:s.port},[s.port]),await new Promise(e=>{o.onmessage=async({data:{ready:t}})=>{1===t&&(await a.resume(),e())}}),{worker:o,node:s,queue:function(e){o.postMessage({url:e})},playNow:function(e){o.postMessage({url:e})},next:function(){o.postMessage({cmd:"ff"})}})}])}));
//# sourceMappingURL=f32.js.map